import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { List, Typography, Rate, Image, Card, Tooltip, Modal, Input } from "antd";
import { MailOutlined, EditOutlined, PhoneOutlined, GlobalOutlined, UserOutlined, HeartFilled, DeleteOutlined } from "@ant-design/icons";
import {UserListData} from "../components/UserListData"
import { useState } from 'react';

export default function Home() {
  const [userDataSource, setUserDataSource] = useState(UserListData);
  const [isEditing, setIsEditing] = useState(false);
  const [editingUser, setEditingUser] = useState(null);

  const handleEdit = (user) => {
    setIsEditing(true);
    setEditingUser({ ...user });
  };
  const resetEditing = () => {
    setIsEditing(false);
    setEditingUser(null);
  };

  const handleDelete = (id) => {
    Modal.confirm({
      title: "Are you sure you want to delete this user's data?",
      okText: "Yes",
      okType: "danger",
      onOk: () => {
        setUserDataSource(allUsers => allUsers.filter(user=> user.id!==id));
        Modal.success({
          content: 'User data deleted successfully',
        });
      }
      });
  }

  return (
    <div>
      <Head>
        <title>Sanjay Karki - Userlist</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1 className={styles.title}>USER LIST</h1>
      <List
        grid={{ xs: 1, sm: 2, md: 2, lg: 3, xl: 4, xxl: 5}}
        renderItem={(user) => {
          return (
            <Card
              className={styles.userCard}
              key={user.id}
              cover={
                <Image src={"https://avatars.dicebear.com/api/adventurer-neutral/"+user.website+".svg"} height={150} />
                // <Image className="itemCardImage" src={"https://api.multiavatar.com/"+user.website+".svg"} height={150} />
              }
              actions={[
                <Rate character={<HeartFilled />} count="1" tooltips={["Favorite"]} />,
                <Tooltip title="Edit"><EditOutlined onClick={() => { handleEdit(user); }} style={{marginTop:"11px", fontSize:"16px"}} /></Tooltip> ,
                <Tooltip title="Delete"><DeleteOutlined  onClick={() => { handleDelete(user.id); }} style={{marginTop:"11px", fontSize:"16px"}} /></Tooltip>
              ]}
            >
              <Card.Meta
                title={user.name}
                description={
                  <Typography.Paragraph>
                    <MailOutlined />&nbsp;&nbsp;{user.email}<br/>
                    <PhoneOutlined />&nbsp;&nbsp;{user.phone}<br/>
                    <GlobalOutlined />&nbsp;&nbsp;{user.website}<br/> 
                  </Typography.Paragraph>
                }
              ></Card.Meta>
            </Card>
          );
        }}
        dataSource={userDataSource}
      >
      </List>
      <Modal
          title="Edit User Data"
          open={isEditing}
          okText="Save"
          onCancel={() => {
            resetEditing();
          }}
          onOk={() => {
            setUserDataSource((prevData) => {
              return prevData.map((user) => {
                if (user.id === editingUser.id) {
                  return editingUser;
                } else {
                  return user;
                }
              });
            });
            resetEditing();
            Modal.success({
              content: 'Edited user data successfully',
            });
          }}
        >
          <Input
            value={editingUser?.name}
            onChange={(e) => {
              setEditingUser((prev) => {
                return { ...prev, name: e.target.value };
              });
            }}
            prefix={<UserOutlined />}
            className={styles.editInputFields}
          />
          <Input
            value={editingUser?.email}
            onChange={(e) => {
              setEditingUser((prev) => {
                return { ...prev, email: e.target.value };
              });
            }}
            prefix={<MailOutlined />}
            className={styles.editInputFields}
          />
          <Input
            value={editingUser?.phone}
            onChange={(e) => {
              setEditingUser((prev) => {
                return { ...prev, phone: e.target.value };
              });
            }}
            prefix={<PhoneOutlined />}
            className={styles.editInputFields}
          />
          <Input
            value={editingUser?.website}
            onChange={(e) => {
              setEditingUser((prev) => {
                return { ...prev, website: e.target.value };
              });
            }}
            prefix={<GlobalOutlined />}
            className={styles.editInputFields}
          />
        </Modal>
        <footer className={styles.footer}>By <a href="https://www.linkedin.com/in/sanjay-karki9/" target="_blank" rel="noreferrer">Sanjay Karki</a></footer>
    </div>
  )
}